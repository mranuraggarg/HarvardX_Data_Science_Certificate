round(predcor, digits = 3)
mean(predcor)
load('/Users/anuraggarg/Downloads/prepd-ortho.rda')
load('/Users/anuraggarg/Downloads/prepd-bathia.rda')
diff = data.frame(
dANB = ortho$ANB2 - ortho$ANB,
dPPPM = ortho$PPPM2 - ortho$PPPM,
dIMPA = ortho$IMPA2 - ortho$IMPA,
dCoA = ortho$CoA2 - ortho$CoA,
dGoPg = ortho$GoPg2 - ortho$GoPg,
dCoGo = ortho$CoGo2 - ortho$CoGo,
dT = ortho$T2 - ortho$T1,
Growth = as.numeric(ortho$Growth) - 1,
Treatment = as.numeric(ortho$Treatment != "NT")
)
table(ortho[, c("Treatment", "Growth")])
table(diff[, c("Treatment", "Growth")])
library(gplots)
library(bnlearn)
diff.delta = sapply(diff[, 1:6], function(x) x / diff$dT)
rho = cor(data.frame(diff.delta, Growth = diff$Growth, Treatment = diff$Treatment))
ug = empty.graph(colnames(rho))
amat(ug) = (rho > 0.4) + 0L - diag(1L, nrow(rho))
graphviz.plot(ug, shape = "ellipse")
bl = tiers2blacklist(list("dT", "Treatment", "Growth",
c("dANB", "dPPPM", "dIMPA", "dCoA", "dGoPg", "dCoGo")))
bl = rbind(bl, c("dT", "Treatment"), c("Treatment", "dT"))
wl = matrix(c("dANB", "dIMPA", "dPPPM", "dIMPA", "dT", "Growth"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
str.raw = boot.strength(diff, R = 200, algorithm = "hc",
algorithm.args = list(whitelist = wl, blacklist = bl))
attr(str.raw, "threshold")
avg.raw.full = averaged.network(str.raw)
strength.plot(avg.raw.full, str.raw, shape = "ellipse", highlight = list(arcs = wl))
avg.raw.full$learning$whitelist = wl
avg.raw.full$learning$blacklist = bl
nrow(undirected.arcs(cpdag(avg.raw.full, wlbl = TRUE)))
nrow(str.raw[with(str.raw, strength > 0.50 & direction > 0.50), ])
nrow(str.raw[with(str.raw, strength > 0.85 & direction > 0.50), ])
min(str.raw[with(str.raw, strength > 0.50 & direction > 0.50), "direction"])
avg.raw.simpler = averaged.network(str.raw, threshold = 0.85)
strength.plot(avg.raw.simpler, str.raw, shape = "ellipse", highlight = list(arcs = wl))
xval = bn.cv(diff, bn = "hc",
algorithm.args = list(blacklist = bl, whitelist = wl),
loss = "cor-lw",loss.args = list(target = "Growth", n = 200),
runs = 10)
err = numeric(10)
for (i in 1:10) {
tt = table(unlist(sapply(xval[[i]], '[[', "observed")),
unlist(sapply(xval[[i]], '[[', "predicted")) > 0.50)
err[i] = (sum(tt) - sum(diag(tt))) / sum(tt)
}#FOR
summary(err)
predcor =
structure(numeric(6),
names = c("dCoGo", "dGoPg", "dIMPA", "dCoA", "dPPPM", "dANB"))
for (var in names(predcor)) {
xval = bn.cv(diff, bn = "hc",
algorithm.args = list(blacklist = bl, whitelist = wl), loss = "cor-lw",
loss.args = list(target = var, n = 200), runs = 10)
predcor[var] = mean(sapply(xval, function(x) attr(x, "mean")))
}#FOR
round(predcor, digits = 3)
mean(predcor)
testImplications <- function( row, nrow(diff) ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("treatment","dT"),
c("treatment","Growth"),
c("treatment","dGoPg","dCoA"),
c("treatment","dCoGo","dCoA"),
c("treatment","dPPPM","dCoGo"),
c("treatment","dPPPM","dCoA"),
c("treatment","dIMPA","dPPPM","dANB"),
c("treatment","dIMPA","dANB","dCoGo"),
c("treatment","dIMPA","dT","dCoA","dANB"),
c("treatment","dIMPA","Growth","dCoA","dANB"),
c("dT","dANB","Growth"),
c("dT","dCoA"),
c("dT","dPPPM","dCoGo"),
c("dT","dIMPA","dPPPM","dANB"),
c("dT","dIMPA","dANB","dCoGo"),
c("dT","dIMPA","dPPPM","Growth","treatment"),
c("dT","dIMPA","Growth","treatment","dCoGo"),
c("dT","dIMPA","dCoA","Growth","dPPPM"),
c("dT","dIMPA","dCoA","Growth","dCoGo"),
c("Growth","dCoA"),
c("Growth","dGoPg","dT"),
c("Growth","dCoGo","dT"),
c("Growth","dPPPM","dCoGo"),
c("Growth","dPPPM","dT"),
c("Growth","dIMPA","dPPPM","dANB"),
c("Growth","dIMPA","dANB","dCoGo"),
c("Growth","dIMPA","dT","dCoA","dANB"),
c("Growth","dIMPA","dT","treatment","dANB"),
c("dANB","dCoA","treatment"),
c("dANB","dGoPg","dT","dCoA"),
c("dANB","dGoPg","dT","treatment"),
c("dANB","dGoPg","Growth","dCoA"),
c("dANB","dGoPg","Growth","treatment"),
c("dANB","dCoGo","dT","dCoA"),
c("dANB","dCoGo","dT","treatment"),
c("dANB","dCoGo","Growth","dCoA"),
c("dANB","dCoGo","Growth","treatment"),
c("dANB","dPPPM","dCoGo"),
c("dANB","dPPPM","dT","dCoA"),
c("dANB","dPPPM","dT","treatment"),
c("dANB","dPPPM","Growth","dCoA"),
c("dANB","dPPPM","Growth","treatment"),
c("dCoA","dPPPM","dCoGo"),
c("dCoA","dIMPA","dPPPM","dANB"),
c("dCoA","dIMPA","dPPPM","Growth","treatment"),
c("dCoA","dIMPA","dT","treatment","dPPPM"),
c("dCoA","dIMPA","dANB","dCoGo"),
c("dCoA","dIMPA","Growth","treatment","dCoGo"),
c("dCoA","dIMPA","dT","treatment","dCoGo"),
c("dGoPg","dCoGo","dT","dCoA"),
c("dGoPg","dPPPM","dCoGo"),
c("dGoPg","dPPPM","dT","dCoA"),
c("dGoPg","dIMPA","dPPPM","dANB"),
c("dGoPg","dIMPA","dANB","dCoGo"),
c("dGoPg","dIMPA","dPPPM","Growth","treatment"),
c("dGoPg","dIMPA","Growth","treatment","dCoGo"),
c("dGoPg","dIMPA","dCoA","Growth","dPPPM"),
c("dGoPg","dIMPA","dCoA","Growth","dCoGo"),
c("dGoPg","dIMPA","dT","treatment","dPPPM"),
c("dGoPg","dIMPA","dT","treatment","dCoGo"),
c("dGoPg","dIMPA","dT","dCoA"),
c("dCoGo","dIMPA","dPPPM","dANB"),
c("dCoGo","dIMPA","dPPPM","Growth","treatment"),
c("dCoGo","dIMPA","dCoA","Growth","dPPPM"),
c("dCoGo","dIMPA","dT","treatment","dPPPM"),
c("dCoGo","dIMPA","dT","dCoA","dPPPM"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
n <- nrow(diff)
load('/Users/anuraggarg/Downloads/prepd-ortho.rda')
load('/Users/anuraggarg/Downloads/prepd-bathia.rda')
diff = data.frame(
dANB = ortho$ANB2 - ortho$ANB,
dPPPM = ortho$PPPM2 - ortho$PPPM,
dIMPA = ortho$IMPA2 - ortho$IMPA,
dCoA = ortho$CoA2 - ortho$CoA,
dGoPg = ortho$GoPg2 - ortho$GoPg,
dCoGo = ortho$CoGo2 - ortho$CoGo,
dT = ortho$T2 - ortho$T1,
Growth = as.numeric(ortho$Growth) - 1,
Treatment = as.numeric(ortho$Treatment != "NT")
)
table(ortho[, c("Treatment", "Growth")])
table(diff[, c("Treatment", "Growth")])
library(gplots)
library(bnlearn)
diff.delta = sapply(diff[, 1:6], function(x) x / diff$dT)
rho = cor(data.frame(diff.delta, Growth = diff$Growth, Treatment = diff$Treatment))
ug = empty.graph(colnames(rho))
amat(ug) = (rho > 0.4) + 0L - diag(1L, nrow(rho))
graphviz.plot(ug, shape = "ellipse")
bl = tiers2blacklist(list("dT", "Treatment", "Growth",
c("dANB", "dPPPM", "dIMPA", "dCoA", "dGoPg", "dCoGo")))
bl = rbind(bl, c("dT", "Treatment"), c("Treatment", "dT"))
wl = matrix(c("dANB", "dIMPA", "dPPPM", "dIMPA", "dT", "Growth"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
str.raw = boot.strength(diff, R = 200, algorithm = "hc",
algorithm.args = list(whitelist = wl, blacklist = bl))
attr(str.raw, "threshold")
avg.raw.full = averaged.network(str.raw)
strength.plot(avg.raw.full, str.raw, shape = "ellipse", highlight = list(arcs = wl))
avg.raw.full$learning$whitelist = wl
avg.raw.full$learning$blacklist = bl
nrow(undirected.arcs(cpdag(avg.raw.full, wlbl = TRUE)))
nrow(str.raw[with(str.raw, strength > 0.50 & direction > 0.50), ])
nrow(str.raw[with(str.raw, strength > 0.85 & direction > 0.50), ])
min(str.raw[with(str.raw, strength > 0.50 & direction > 0.50), "direction"])
avg.raw.simpler = averaged.network(str.raw, threshold = 0.85)
strength.plot(avg.raw.simpler, str.raw, shape = "ellipse", highlight = list(arcs = wl))
xval = bn.cv(diff, bn = "hc",
algorithm.args = list(blacklist = bl, whitelist = wl),
loss = "cor-lw",loss.args = list(target = "Growth", n = 200),
runs = 10)
err = numeric(10)
for (i in 1:10) {
tt = table(unlist(sapply(xval[[i]], '[[', "observed")),
unlist(sapply(xval[[i]], '[[', "predicted")) > 0.50)
err[i] = (sum(tt) - sum(diag(tt))) / sum(tt)
}#FOR
summary(err)
predcor =
structure(numeric(6),
names = c("dCoGo", "dGoPg", "dIMPA", "dCoA", "dPPPM", "dANB"))
for (var in names(predcor)) {
xval = bn.cv(diff, bn = "hc",
algorithm.args = list(blacklist = bl, whitelist = wl), loss = "cor-lw",
loss.args = list(target = var, n = 200), runs = 10)
predcor[var] = mean(sapply(xval, function(x) attr(x, "mean")))
}#FOR
round(predcor, digits = 3)
mean(predcor)
sample.size <- nrow(diff)
testImplications <- function(rho, sample.size){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("treatment","dT"),
c("treatment","Growth"),
c("treatment","dGoPg","dCoA"),
c("treatment","dCoGo","dCoA"),
c("treatment","dPPPM","dCoGo"),
c("treatment","dPPPM","dCoA"),
c("treatment","dIMPA","dPPPM","dANB"),
c("treatment","dIMPA","dANB","dCoGo"),
c("treatment","dIMPA","dT","dCoA","dANB"),
c("treatment","dIMPA","Growth","dCoA","dANB"),
c("dT","dANB","Growth"),
c("dT","dCoA"),
c("dT","dPPPM","dCoGo"),
c("dT","dIMPA","dPPPM","dANB"),
c("dT","dIMPA","dANB","dCoGo"),
c("dT","dIMPA","dPPPM","Growth","treatment"),
c("dT","dIMPA","Growth","treatment","dCoGo"),
c("dT","dIMPA","dCoA","Growth","dPPPM"),
c("dT","dIMPA","dCoA","Growth","dCoGo"),
c("Growth","dCoA"),
c("Growth","dGoPg","dT"),
c("Growth","dCoGo","dT"),
c("Growth","dPPPM","dCoGo"),
c("Growth","dPPPM","dT"),
c("Growth","dIMPA","dPPPM","dANB"),
c("Growth","dIMPA","dANB","dCoGo"),
c("Growth","dIMPA","dT","dCoA","dANB"),
c("Growth","dIMPA","dT","treatment","dANB"),
c("dANB","dCoA","treatment"),
c("dANB","dGoPg","dT","dCoA"),
c("dANB","dGoPg","dT","treatment"),
c("dANB","dGoPg","Growth","dCoA"),
c("dANB","dGoPg","Growth","treatment"),
c("dANB","dCoGo","dT","dCoA"),
c("dANB","dCoGo","dT","treatment"),
c("dANB","dCoGo","Growth","dCoA"),
c("dANB","dCoGo","Growth","treatment"),
c("dANB","dPPPM","dCoGo"),
c("dANB","dPPPM","dT","dCoA"),
c("dANB","dPPPM","dT","treatment"),
c("dANB","dPPPM","Growth","dCoA"),
c("dANB","dPPPM","Growth","treatment"),
c("dCoA","dPPPM","dCoGo"),
c("dCoA","dIMPA","dPPPM","dANB"),
c("dCoA","dIMPA","dPPPM","Growth","treatment"),
c("dCoA","dIMPA","dT","treatment","dPPPM"),
c("dCoA","dIMPA","dANB","dCoGo"),
c("dCoA","dIMPA","Growth","treatment","dCoGo"),
c("dCoA","dIMPA","dT","treatment","dCoGo"),
c("dGoPg","dCoGo","dT","dCoA"),
c("dGoPg","dPPPM","dCoGo"),
c("dGoPg","dPPPM","dT","dCoA"),
c("dGoPg","dIMPA","dPPPM","dANB"),
c("dGoPg","dIMPA","dANB","dCoGo"),
c("dGoPg","dIMPA","dPPPM","Growth","treatment"),
c("dGoPg","dIMPA","Growth","treatment","dCoGo"),
c("dGoPg","dIMPA","dCoA","Growth","dPPPM"),
c("dGoPg","dIMPA","dCoA","Growth","dCoGo"),
c("dGoPg","dIMPA","dT","treatment","dPPPM"),
c("dGoPg","dIMPA","dT","treatment","dCoGo"),
c("dGoPg","dIMPA","dT","dCoA"),
c("dCoGo","dIMPA","dPPPM","dANB"),
c("dCoGo","dIMPA","dPPPM","Growth","treatment"),
c("dCoGo","dIMPA","dCoA","Growth","dPPPM"),
c("dCoGo","dIMPA","dT","treatment","dPPPM"),
c("dCoGo","dIMPA","dT","dCoA","dPPPM"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
View(implications)
View(implications)
sigmoid <- function(Z){
exps <- 1 + exp(Z)
return(1 / exps)
}
initialize_with_zeros <- function(dim){
w <- matrix(0, nrow = dim, ncol = 1)
b = 0
return(list(w, b))
}
propagate <- function(w, b, X, Y){
m = ncol(X)
# Forward Propagation
A = sigmoid((t(w) %*% X) + b)
cost = (-1 / m) * sum(Y * log(A) + (1 - Y) * log(1 - A))
# Backward Propagation
dw = (1 / m) * (X %*% t(A - Y)) db = (1 / m) * rowSums(A - Y)
propagate <- function(w, b, X, Y){
m = ncol(X)
# Forward Propagation
A = sigmoid((t(w) %*% X) + b)
cost = (-1 / m) * sum(Y * log(A) + (1 - Y) * log(1 - A))
# Backward Propagation
dw = (1 / m) * (X %*% t(A - Y))
db = (1 / m) * rowSums(A - Y)
grads <- list(dw, db) return(list(grads, cost))
propagate <- function(w, b, X, Y){
m = ncol(X)
# Forward Propagation
A = sigmoid((t(w) %*% X) + b)
cost = (-1 / m) * sum(Y * log(A) + (1 - Y) * log(1 - A))
# Backward Propagation
dw = (1 / m) * (X %*% t(A - Y))
db = (1 / m) * rowSums(A - Y)
grads <- list(dw, db)
return(list(grads, cost))
}
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]]) db = grads[[2]]
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0){
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0)) {
cat(sprintf("Cost after iteration %d: %06f\n", i,
cost[[i]]))
}
params <- list(w, b)
grads <- list(dw, db)
}
return(list(params, grads, costs))
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0)) {
cat(sprintf("Cost after iteration %d: %06f\n", i,
cost[[i]]))
}
params <- list(w, b)
grads <- list(dw, db)
}
return(list(params, grads, costs))
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0)) {
cat(sprintf("Cost after iteration %d: %06f\n", i,
cost[[i]]))
}
params <- list(w, b)
grads <- list(dw, db)
}
return(list(params, grads, costs))
}
pred <- function(w, b, X) {
m = ncol(X)
Y_prediction <- matrix(0, nrow = 1, ncol = m)
# Activation vector A to predict the probability of a dog/cat
A = sigmoid((t(w) %*% X) + b)
for (i in 1:ncol(A)){
if (A[1, i] > 0.5) {
Y_prediction[1, i] = 1
} else Y_prediction[1, i] = 0
}
return(Y_prediction)
}
x <- c(1, 2 ,3)
mean(x)
?source
knit_with_parameters("~/Library/CloudStorage/OneDrive-НИУВысшаяшколаэкономики/Documents/EdX/6. Data Wrangling/Week-1.Rmd")
# see working directory
getwd()
# set path to the location for raw data files in the dslabs package and list files
path <- system.file("extdata", package="dslabs")
list.files(path)
# generate a full path to a file
filename <- "murders.csv"
fullpath <- file.path(path, filename)
fullpath
# copy file from dslabs package to your working directory
file.copy(fullpath, getwd())
# check if the file exists
file.exists(filename)
# set path to the location for raw data files in the dslabs package and list files
path <- system.file("extdata", package="dslabs")
list.files(path)
# generate a full path to a file
filename <- "murders.csv"
fullpath <- file.path(path, filename)
fullpath
# copy file from dslabs package to your working directory
file.copy(fullpath, getwd())
# check if the file exists
file.exists(filename)
install.packages("tidyverse")
library(tidyverse)
library(readr)
# reading first few lines
read_lines("murders.csv")
# reading first few lines
read_lines("murders.csv", n_max=3)
data_murders <- read_csv("murders.csv")
data_murders
data_murders <- read_csv("murders.csv")
head(data_murders)
data_murders2 <- read.csv("murders.csv")
head(data_murders2)
class(data_murders2)
data_murders2 <- read.csv("murders.csv")
class(data_murders2)
library(readr)
library(readxl)
download.file(url)
download.file(url, destfile = "wdbc.data")
download.file(url=url, destfile = "wdbc.data")
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
download.file(url, "wdbc.data")
download.file(url, "wdbc.data")
getwd()
setwd("~/OneDrive - НИУ Высшая школа экономики/Documents/EdX/6. Data Wrangling/week-1")
getwd()
download.file(url, "wdbc.data")
download.file(url, "wdbc.data")
read_lines("wdbc.data", n_max=3)
wdbc_dat <- read_csv("wdbc.data")
head(wdbc_dat)
wdbc_dat <- read_csv("wdbc.data", col_names = FALSE)
head(wdbc_dat)
wdbc_dat <- read_csv("wdbc.data", header = FALSE)
wdbc_dat <- read_csv("wdbc.data", col_names = FALSE)
head(wdbc_dat)
wdbc_dat <- read_csv("wdbc.csv", col_names = FALSE)
head(wdbc_dat)
download.file(url, "wdbc.data")
read_lines("wdbc.data", n_max=3)
wdbc_dat <- read_csv("wdbc.data", col_names=FALSE)
shape(wdbc_dat)
wdbc_dat <- read_csv("wdbc.data", col_names=FALSE)
wdbc_dat
wdbc_dat <- read_csv("wdbc.data", col_names=FALSE)
summarise(wdbc_dat)
wdbc_dat <- read_csv("wdbc.data", col_names=FALSE)
head(wdbc_dat)
View(wdbc_dat)
knit_with_parameters("~/Library/CloudStorage/OneDrive-НИУВысшаяшколаэкономики/Documents/EdX/6. Data Wrangling/week-1/week-1_quiz.Rmd")
