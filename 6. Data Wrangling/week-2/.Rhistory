avg.raw.full = averaged.network(str.raw)
strength.plot(avg.raw.full, str.raw, shape = "ellipse", highlight = list(arcs = wl))
avg.raw.full$learning$whitelist = wl
avg.raw.full$learning$blacklist = bl
nrow(undirected.arcs(cpdag(avg.raw.full, wlbl = TRUE)))
nrow(str.raw[with(str.raw, strength > 0.50 & direction > 0.50), ])
nrow(str.raw[with(str.raw, strength > 0.85 & direction > 0.50), ])
min(str.raw[with(str.raw, strength > 0.50 & direction > 0.50), "direction"])
avg.raw.simpler = averaged.network(str.raw, threshold = 0.85)
strength.plot(avg.raw.simpler, str.raw, shape = "ellipse", highlight = list(arcs = wl))
xval = bn.cv(diff, bn = "hc",
algorithm.args = list(blacklist = bl, whitelist = wl),
loss = "cor-lw",loss.args = list(target = "Growth", n = 200),
runs = 10)
err = numeric(10)
for (i in 1:10) {
tt = table(unlist(sapply(xval[[i]], '[[', "observed")),
unlist(sapply(xval[[i]], '[[', "predicted")) > 0.50)
err[i] = (sum(tt) - sum(diag(tt))) / sum(tt)
}#FOR
summary(err)
predcor =
structure(numeric(6),
names = c("dCoGo", "dGoPg", "dIMPA", "dCoA", "dPPPM", "dANB"))
for (var in names(predcor)) {
xval = bn.cv(diff, bn = "hc",
algorithm.args = list(blacklist = bl, whitelist = wl), loss = "cor-lw",
loss.args = list(target = var, n = 200), runs = 10)
predcor[var] = mean(sapply(xval, function(x) attr(x, "mean")))
}#FOR
round(predcor, digits = 3)
mean(predcor)
sample.size <- nrow(diff)
testImplications <- function(rho, sample.size){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("treatment","dT"),
c("treatment","Growth"),
c("treatment","dGoPg","dCoA"),
c("treatment","dCoGo","dCoA"),
c("treatment","dPPPM","dCoGo"),
c("treatment","dPPPM","dCoA"),
c("treatment","dIMPA","dPPPM","dANB"),
c("treatment","dIMPA","dANB","dCoGo"),
c("treatment","dIMPA","dT","dCoA","dANB"),
c("treatment","dIMPA","Growth","dCoA","dANB"),
c("dT","dANB","Growth"),
c("dT","dCoA"),
c("dT","dPPPM","dCoGo"),
c("dT","dIMPA","dPPPM","dANB"),
c("dT","dIMPA","dANB","dCoGo"),
c("dT","dIMPA","dPPPM","Growth","treatment"),
c("dT","dIMPA","Growth","treatment","dCoGo"),
c("dT","dIMPA","dCoA","Growth","dPPPM"),
c("dT","dIMPA","dCoA","Growth","dCoGo"),
c("Growth","dCoA"),
c("Growth","dGoPg","dT"),
c("Growth","dCoGo","dT"),
c("Growth","dPPPM","dCoGo"),
c("Growth","dPPPM","dT"),
c("Growth","dIMPA","dPPPM","dANB"),
c("Growth","dIMPA","dANB","dCoGo"),
c("Growth","dIMPA","dT","dCoA","dANB"),
c("Growth","dIMPA","dT","treatment","dANB"),
c("dANB","dCoA","treatment"),
c("dANB","dGoPg","dT","dCoA"),
c("dANB","dGoPg","dT","treatment"),
c("dANB","dGoPg","Growth","dCoA"),
c("dANB","dGoPg","Growth","treatment"),
c("dANB","dCoGo","dT","dCoA"),
c("dANB","dCoGo","dT","treatment"),
c("dANB","dCoGo","Growth","dCoA"),
c("dANB","dCoGo","Growth","treatment"),
c("dANB","dPPPM","dCoGo"),
c("dANB","dPPPM","dT","dCoA"),
c("dANB","dPPPM","dT","treatment"),
c("dANB","dPPPM","Growth","dCoA"),
c("dANB","dPPPM","Growth","treatment"),
c("dCoA","dPPPM","dCoGo"),
c("dCoA","dIMPA","dPPPM","dANB"),
c("dCoA","dIMPA","dPPPM","Growth","treatment"),
c("dCoA","dIMPA","dT","treatment","dPPPM"),
c("dCoA","dIMPA","dANB","dCoGo"),
c("dCoA","dIMPA","Growth","treatment","dCoGo"),
c("dCoA","dIMPA","dT","treatment","dCoGo"),
c("dGoPg","dCoGo","dT","dCoA"),
c("dGoPg","dPPPM","dCoGo"),
c("dGoPg","dPPPM","dT","dCoA"),
c("dGoPg","dIMPA","dPPPM","dANB"),
c("dGoPg","dIMPA","dANB","dCoGo"),
c("dGoPg","dIMPA","dPPPM","Growth","treatment"),
c("dGoPg","dIMPA","Growth","treatment","dCoGo"),
c("dGoPg","dIMPA","dCoA","Growth","dPPPM"),
c("dGoPg","dIMPA","dCoA","Growth","dCoGo"),
c("dGoPg","dIMPA","dT","treatment","dPPPM"),
c("dGoPg","dIMPA","dT","treatment","dCoGo"),
c("dGoPg","dIMPA","dT","dCoA"),
c("dCoGo","dIMPA","dPPPM","dANB"),
c("dCoGo","dIMPA","dPPPM","Growth","treatment"),
c("dCoGo","dIMPA","dCoA","Growth","dPPPM"),
c("dCoGo","dIMPA","dT","treatment","dPPPM"),
c("dCoGo","dIMPA","dT","dCoA","dPPPM"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
View(implications)
View(implications)
sigmoid <- function(Z){
exps <- 1 + exp(Z)
return(1 / exps)
}
initialize_with_zeros <- function(dim){
w <- matrix(0, nrow = dim, ncol = 1)
b = 0
return(list(w, b))
}
propagate <- function(w, b, X, Y){
m = ncol(X)
# Forward Propagation
A = sigmoid((t(w) %*% X) + b)
cost = (-1 / m) * sum(Y * log(A) + (1 - Y) * log(1 - A))
# Backward Propagation
dw = (1 / m) * (X %*% t(A - Y)) db = (1 / m) * rowSums(A - Y)
propagate <- function(w, b, X, Y){
m = ncol(X)
# Forward Propagation
A = sigmoid((t(w) %*% X) + b)
cost = (-1 / m) * sum(Y * log(A) + (1 - Y) * log(1 - A))
# Backward Propagation
dw = (1 / m) * (X %*% t(A - Y))
db = (1 / m) * rowSums(A - Y)
grads <- list(dw, db) return(list(grads, cost))
propagate <- function(w, b, X, Y){
m = ncol(X)
# Forward Propagation
A = sigmoid((t(w) %*% X) + b)
cost = (-1 / m) * sum(Y * log(A) + (1 - Y) * log(1 - A))
# Backward Propagation
dw = (1 / m) * (X %*% t(A - Y))
db = (1 / m) * rowSums(A - Y)
grads <- list(dw, db)
return(list(grads, cost))
}
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]]) db = grads[[2]]
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0){
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0)) {
cat(sprintf("Cost after iteration %d: %06f\n", i,
cost[[i]]))
}
params <- list(w, b)
grads <- list(dw, db)
}
return(list(params, grads, costs))
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0)) {
cat(sprintf("Cost after iteration %d: %06f\n", i,
cost[[i]]))
}
params <- list(w, b)
grads <- list(dw, db)
}
return(list(params, grads, costs))
optimize <- function(w, b, X, Y, num_iter, learning_rate, print_cost = FALSE) {
cost <- list()
for (i in 1:num_iter) {
# Cost and gradient calculation
grads = propagate(w, b, X, Y)[[1]]
# grads is a list
cost[i] = propagate(w, b, X, Y)[[2]]
# Retrieve the derivatives
dw = matrix(grads[[1]])
db = grads[[2]]
# Update the parameters
w = w - learning_rate * dw
b = b - learning_rate * db
# Record the cost
if (i%%100 == 0) {
costs <- cost
}
# Print the cost every 500th iteration
if ((print_cost == T) & (i%%500 == 0)) {
cat(sprintf("Cost after iteration %d: %06f\n", i,
cost[[i]]))
}
params <- list(w, b)
grads <- list(dw, db)
}
return(list(params, grads, costs))
}
pred <- function(w, b, X) {
m = ncol(X)
Y_prediction <- matrix(0, nrow = 1, ncol = m)
# Activation vector A to predict the probability of a dog/cat
A = sigmoid((t(w) %*% X) + b)
for (i in 1:ncol(A)){
if (A[1, i] > 0.5) {
Y_prediction[1, i] = 1
} else Y_prediction[1, i] = 0
}
return(Y_prediction)
}
x <- c(1, 2 ,3)
mean(x)
?source
knit_with_parameters("~/Library/CloudStorage/OneDrive-НИУВысшаяшколаэкономики/Documents/EdX/6. Data Wrangling/Week-1.Rmd")
# see working directory
getwd()
# set path to the location for raw data files in the dslabs package and list files
path <- system.file("extdata", package="dslabs")
list.files(path)
# generate a full path to a file
filename <- "murders.csv"
fullpath <- file.path(path, filename)
fullpath
# copy file from dslabs package to your working directory
file.copy(fullpath, getwd())
# check if the file exists
file.exists(filename)
# set path to the location for raw data files in the dslabs package and list files
path <- system.file("extdata", package="dslabs")
list.files(path)
# generate a full path to a file
filename <- "murders.csv"
fullpath <- file.path(path, filename)
fullpath
# copy file from dslabs package to your working directory
file.copy(fullpath, getwd())
# check if the file exists
file.exists(filename)
setwd("~/OneDrive - НИУ Высшая школа экономики/Documents/EdX/6. Data Wrangling/week-2")
library(tidyverse)
library(dslabs)
library(tidyverse)
library(dslabs)
path <- system.file("extdata", package="dslabs")
filename <- file.path(path, "fertility-two-countries-example.csv")
wide_data <- read_csv(filename)
# snippet of wide data
wide_data %>% select(country, '1960':'1965')
# move the values in the columns 1960 through 2015 into a single column
wide_data %>% pivot_longer(`1960`:`2015`)
# another way to do this - only country isn't being pivoted
wide_data %>% pivot_longer(-country)
# change the default column names
new_tidy_data <- wide_data %>%
pivot_longer(-country, names_to = "year", values_to = "fertility")
head(new_tidy_data)
# compare the class from our original tidy data (year is an integer) and in the new version (year is a character)
class(tidy_data$year)
# in the new version (year is a character)
class(new_tidy_data$year)
# use the names_transform argument to change the class of the year values to numeric
new_tidy_data <- wide_data %>%
pivot_longer(-country, names_to = "year", values_to = "fertility",
names_transform = list(year=as.numeric))
# plot the data as before
new_tidy_data %>% ggplot(aes(year, fertility, color = country)) +
geom_point()
# import data
path <- system.file("extdata", package = "dslabs")
fname <-  "life-expectancy-and-fertility-two-countries-example.csv"
filename <- file.path(path, fname)
raw_dat <- read_csv(filename)
select(raw_dat, 1:4)
pivot_longer(raw_dat)
# import data
path <- system.file("extdata", package = "dslabs")
fname <-  "life-expectancy-and-fertility-two-countries-example.csv"
filename <- file.path(path, fname)
raw_dat <- read_csv(filename)
select(raw_dat, 1:4)
raw_dat %>% pivot_longer(-country)
dat <- raw_dat %>% pivot_longer(-country)
head(dat)
dat %>% separate(wide_data, name, '_')
dat %>% separate(name, c("year", "name"))
dat %>% separate(name, c("year", "name"), convert=TRUE)
dat %>% separate(name, c("year", "name"), extra = "merge", convert = TRUE)
dat %>% separate(name, c("year", "name"), extra = "merge", convert = TRUE)
%>% pivot_wider()
dat
%>% separate(name, c("year", "name"), extra = "merge", convert = TRUE) %>%           pivot_wider()
dat %>%
separate(name, c("year", "name"), extra = "merge", convert = TRUE) %>%
pivot_wider()
# using the data from the previous video
# if we had used this non-optimal approach to separate
dat %>%
separate(name, c("year", "name_1", "name_2"),
fill = "right", convert = TRUE)
# we could unite the second and third columns using unite()
dat %>%
separate(name, c("year", "name_1", "name_2"),
fill = "right", convert = TRUE) %>%
unite(variable_name, name_1, name_2, sep="_")
# spread the columns
dat %>%
separate(name, c("year", "name_1", "name_2"),
fill = "right", convert = TRUE) %>%
unite(name, name_1, name_2, sep="_") %>%
spread(name, value) %>%
rename(fertlity = fertility_NA)
wide_dat <- read_csv("race_finish.csv")
head(wide_data)
wide_dat <- read_csv("race_finish.csv")
head(wide_dat)
wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time", convert = TRUE)
wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time", convert = TRUE)
dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time") %>%
dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
dat
dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
dat$year <- as.integer(dat$year)
dat$age_group <- as.integer(dat$age_group)
dat
dat <- wide_dat %>%
pivot_longer(age_group, names_to = "year", values_to = "Time")
dat$year <- as.integer(dat$year)
dat$age_group <- as.integer(dat$age_group)
dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
dat$year <- as.integer(dat$year)
dat$age_group <- as.integer(dat$age_group)
dat
d <- read_tsv("us_disease.tsv")
d
d <- read_delim("us_disease.tsv", delim = ' ')
d
d <- read_tsv("us_disease.tsv")
d
d <- read_tsv("us_disease.tsv")
d
d <- read_csv("us_disease.tsv")
d
pivot_longer(c('state', 'year', 'population'))
pivot_longer(-c('state', 'year', 'population'))
pivot_longer(c(HepatitisA,Mumps,Polio,Rubella))
pivot_longer(c('HepatitisA','Mumps','Polio','Rubella'))
dat_wide %>%
pivot_longer(-state, -year, -population, names_to = "disease", values_to = "count")
d %>%
pivot_longer(-state, -year, -population, names_to = "disease", values_to = "count")
d %>%
pivot_longer(HepatitisA:Rubella, names_to = "disease", values_to = "count")
wide_dat <- read_csv("race_finish.csv")
head(wide_dat)
races_dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
races_dat$year <- as.integer(races_dat$year)
races_dat$age_group <- as.integer(races_dat$age_group)
races_dat
pivot_wider(names_from = year, values_from = time)
pivot_wider(names_from = 'year', values_from = 'time')
wide_dat <- read_csv("race_finish.csv")
head(wide_dat)
races_dat <- wide_dat %>%
pivot_longer(-age_group, names_to = "year", values_to = "Time")
races_dat
pivot_wider(names_from = 'year', values_from = 'time')
pivot_wider(names_from = year, values_from = time)
races_dat %>%
pivot_wider(names_from = year, values_from = time)
races_dat %>%
pivot_wider(names_from = year, values_from = Time)
d <- read_csv("times.csv", col_types="dcccc")
d
d %>%
pivot_longer(-age_group)
d %>%
pivot_longer(-age_group) %>%
separate('name', 'year', 'var')
d %>%
pivot_longer(-age_group) %>%
separate('name', c('year', 'var'))
d %>%
pivot_longer(-age_group, names_to = 'key', values_to = 'value') %>%
separate('key', c('year', 'variable_name'))
d %>%
pivot_longer(-age_group, names_to = 'key', values_to = 'value') %>%
separate('key', c('year', 'variable_name')) %>%
pivot_wider(names_from = variable_name, values_from = value)
d %>%
pivot_longer(-age_group, names_to = 'key', values_to = 'value') %>%
separate(col = 'key', into = c('year', 'variable_name')) %>%
pivot_wider(names_from = variable_name, values_from = value)
d %>%
pivot_longer(-age_group, names_to = 'key', values_to = 'value') %>%
separate(col = key, into = c('year', 'variable_name')) %>%
pivot_wider(names_from = variable_name, values_from = value)
co2
head(co2)
co2_dat <- co2
co2_dat
co2_dat %>%
pivot_longer(-year, names_to = 'month', values_to = 'value')
co2_wide <- co2
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
head(co2_wide)
View(co2_wide)
View(co2_wide)
View(co2_wide)
View(co2_wide)
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
head(co2_wide)
co2_wide %>%
pivot_longer(-year, names_to = "month", values_to = "co2")
co2_tidy <- pivot_longer(co2_wide, -year, names_to = "month", values_to = "co2")
co2_tidy <- pivot_longer(co2_wide, -year, names_to = "month", values_to = "co2")
head(co2_tidy)
co2_tidy <- pivot_longer(co2_wide, -year, names_to = "month", values_to = "co2")
co2_tidy <- pivot_longer(co2_wide, -year, names_to = "month", values_to = "co2")
head(co2_tidy)
co2_tidy %>% ggplot(aes(as.numeric(month), co2, color = year)) + geom_line()
library(dslabs)
data(admissions)
dat <- admissions %>% select(-applicants)
head(dat)
dat %>%
pivot_wider(names_from = gender, values_from = admitted)
dat_tidy <- pivot_wider(dat, names_from = gender, values_from = admitted)
dat_tidy
tmp <- admissions %>%
pivot_longer(cols = c(admitted, applicants), names_to = "key", values_to = "value")
tmp
tmp $>$
unite(tmp, 'column_name', gender, key)
unite(tmp, 'column_name', c(gender, key))
tmp2 <- unite(tmp, 'column_name', c(gender, key))
tmp2
tmp2 <- unite(tmp, 'column_name', c(key, gender))
tmp2
pivot_wider(tmp2, names_from = column_name, values_from = value)
tmp3 <- pivot_wider(tmp2, names_from = column_name, values_from = value)
tmp3
